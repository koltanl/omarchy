#!/bin/bash
# TV Configuration Deployment Script
# Post-install automation for Omarchy TV setup
# 
# This script installs all required dependencies and deploys TV
# configuration files to their proper system locations with automatic backups.

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
TV_ROOT="$REPO_ROOT/tv"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOG_FILE="/tmp/tv-deploy-${TIMESTAMP}.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_error "This script should not be run as root"
        log_error "Please run as a regular user with sudo privileges"
        exit 1
    fi
}

# Function to check if sudo is available
check_sudo() {
    if ! command -v sudo &> /dev/null; then
        log_error "sudo is required but not found"
        exit 1
    fi
    
    if ! sudo -n true 2>/dev/null; then
        log_info "This script requires sudo privileges for package installation"
        log_info "Please ensure you can run sudo commands"
    fi
}

# Function to install dependencies
install_dependencies() {
    log_info "Installing TV dependencies..."
    
    local deps_file="$SCRIPT_DIR/dependancies.txt"
    
    if [[ ! -f "$deps_file" ]]; then
        log_error "Dependencies file not found: $deps_file"
        exit 1
    fi
    
    # Read dependencies and install them
    local packages=$(cat "$deps_file" | tr '\n' ' ')
    log_info "Installing packages: $packages"
    
    if sudo pacman -S --needed --noconfirm $packages; then
        log_success "All dependencies installed successfully"
    else
        log_error "Failed to install some dependencies"
        exit 1
    fi
}

# Function to backup existing file
backup_file() {
    local target_file="$1"
    
    if [[ -f "$target_file" ]]; then
        local backup_file="${target_file}.backup"
        if cp "$target_file" "$backup_file"; then
            log_info "Backed up existing file: $target_file -> $backup_file"
        else
            log_warning "Failed to backup: $target_file"
        fi
    fi
}

# Function to deploy configuration files
deploy_configs() {
    log_info "Deploying TV configuration files..."
    
    # Deploy Hyprland configs
    log_info "Deploying Hyprland configuration..."
    local hypr_config_dir="$HOME/.config/hypr"
    mkdir -p "$hypr_config_dir"
    
    for conf_file in "$TV_ROOT/conf/hypr"/*.conf; do
        if [[ -f "$conf_file" ]]; then
            local filename=$(basename "$conf_file")
            local target="$hypr_config_dir/$filename"
            backup_file "$target"
            if cp "$conf_file" "$target"; then
                log_success "Deployed: $filename"
            else
                log_error "Failed to deploy: $filename"
                exit 1
            fi
        fi
    done
    
    # Deploy Kitty configs
    log_info "Deploying Kitty configuration..."
    local kitty_config_dir="$HOME/.config/kitty"
    mkdir -p "$kitty_config_dir"
    
    for conf_file in "$TV_ROOT/conf/kitty"/*.conf; do
        if [[ -f "$conf_file" ]]; then
            local filename=$(basename "$conf_file")
            local target="$kitty_config_dir/$filename"
            backup_file "$target"
            if cp "$conf_file" "$target"; then
                log_success "Deployed: $filename"
            else
                log_error "Failed to deploy: $filename"
                exit 1
            fi
        fi
    done
}

# Function to deploy scripts
deploy_scripts() {
    log_info "Deploying TV scripts..."
    
    local bin_dir="$HOME/bin"
    mkdir -p "$bin_dir"
    
    for script_file in "$TV_ROOT/bin"/*; do
        if [[ -f "$script_file" ]]; then
            local filename=$(basename "$script_file")
            local target="$bin_dir/$filename"
            backup_file "$target"
            if cp "$script_file" "$target"; then
                # Only make executable if it's not a .conf file
                if [[ "$filename" != *.conf ]]; then
                    chmod +x "$target"
                    log_success "Deployed script: $filename"
                else
                    log_success "Deployed config: $filename"
                fi
            else
                log_error "Failed to deploy: $filename"
                exit 1
            fi
        fi
    done
}

# Function to verify deployment
verify_deployment() {
    log_info "Verifying TV deployment..."
    
    local errors=0
    
    # Check Hyprland configs
    for conf_file in "$TV_ROOT/conf/hypr"/*.conf; do
        if [[ -f "$conf_file" ]]; then
            local filename=$(basename "$conf_file")
            local target="$HOME/.config/hypr/$filename"
            if [[ ! -f "$target" ]]; then
                log_error "Missing Hyprland config: $filename"
                ((errors++))
            fi
        fi
    done
    
    # Check Kitty configs
    for conf_file in "$TV_ROOT/conf/kitty"/*.conf; do
        if [[ -f "$conf_file" ]]; then
            local filename=$(basename "$conf_file")
            local target="$HOME/.config/kitty/$filename"
            if [[ ! -f "$target" ]]; then
                log_error "Missing Kitty config: $filename"
                ((errors++))
            fi
        fi
    done
    
    # Check scripts (only check actual scripts, not .conf files)
    for script_file in "$TV_ROOT/bin"/*; do
        if [[ -f "$script_file" ]]; then
            local filename=$(basename "$script_file")
            local target="$HOME/bin/$filename"
            
            # Skip .conf files as they're not executable scripts
            if [[ "$filename" == *.conf ]]; then
                if [[ ! -f "$target" ]]; then
                    log_error "Missing config file: $filename"
                    ((errors++))
                fi
            else
                # This is an actual script, check if it exists and is executable
                if [[ ! -f "$target" ]]; then
                    log_error "Missing script: $filename"
                    ((errors++))
                elif [[ ! -x "$target" ]]; then
                    log_error "Script not executable: $filename"
                    ((errors++))
                fi
            fi
        fi
    done
    
    if [[ $errors -eq 0 ]]; then
        log_success "TV deployment verification passed - all files deployed correctly"
        return 0
    else
        log_error "TV deployment verification failed - $errors errors found"
        return 1
    fi
}

# Function to show help
show_help() {
    cat << EOF
TV Configuration Deployment Script

Usage: $0 [OPTIONS]

Options:
    -h, --help      Show this help message
    --skip-deps      Skip dependency installation
    --skip-configs   Skip configuration deployment
    --skip-scripts   Skip script deployment
    --verify-only    Only verify existing deployment

This script:
1. Installs all required packages from dependancies.txt
2. Deploys Hyprland and Kitty configurations for TV setup
3. Deploys all scripts to ~/bin/
4. Creates .backup files for any existing configurations
5. Verifies all files were deployed correctly

TV-specific features:
- Single monitor setup with scaling
- Simplified workspace navigation (1-5 with looping)
- File opener with tmux integration
- Media-focused application bindings

Log file: $LOG_FILE
EOF
}

# Main execution
main() {
    local skip_deps=false
    local skip_configs=false
    local skip_scripts=false
    local verify_only=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            --skip-deps)
                skip_deps=true
                shift
                ;;
            --skip-configs)
                skip_configs=true
                shift
                ;;
            --skip-scripts)
                skip_scripts=true
                shift
                ;;
            --verify-only)
                verify_only=true
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Initialize log file
    echo "=== TV Deployment Log - $(date) ===" > "$LOG_FILE"
    
    log_info "Starting TV configuration deployment"
    log_info "Repository root: $REPO_ROOT"
    log_info "TV root: $TV_ROOT"
    
    # Pre-flight checks
    check_root
    check_sudo
    
    # Execute deployment steps
    if [[ "$verify_only" == "true" ]]; then
        verify_deployment
    else
        if [[ "$skip_deps" == "false" ]]; then
            install_dependencies
        else
            log_info "Skipping dependency installation"
        fi
        
        if [[ "$skip_configs" == "false" ]]; then
            deploy_configs
        else
            log_info "Skipping configuration deployment"
        fi
        
        if [[ "$skip_scripts" == "false" ]]; then
            deploy_scripts
        else
            log_info "Skipping script deployment"
        fi
        
        verify_deployment
    fi
    
    log_success "TV deployment completed successfully!"
    log_info "Log file saved to: $LOG_FILE"
}

# Run main function with all arguments
main "$@"
